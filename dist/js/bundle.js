!function(t){var e={};function r(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(o,n,function(e){return t[e]}.bind(null,n));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var o={holderId:"root-holder",localeStorageKey:"toToStorage"};var n,a=function(){function t(t){this.id=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15),this.text=t||"Новый проект",this.isDone=!1}return t.prototype.toggleStatus=function(){this.isDone=!this.isDone},t.prototype.changeText=function(t){this.text=t},t.prototype.update=function(t){return this.id=t.id,this.text=t.text,this.isDone=t.isDone,this},t}();!function(t){t.setItem=function(t,e){localStorage.setItem(t,JSON.stringify(e))},t.getItem=function(t){return JSON.parse(localStorage.getItem(t))},t.removeItem=function(t){this.contains(t)&&localStorage.removeItem(t)},t.contains=function(t){return!!localStorage.getItem(t)},t.clear=function(){localStorage.clear()}}(n||(n={}));var c=function(){function t(){var t=this;this.storage=[];var e=n.getItem(o.localeStorageKey);e&&e.length&&e.forEach(function(e){t.storage.push((new a).update(e))})}return t.getInstance=function(){return t.instance||(t.instance=new t),t.instance},t.prototype.search=function(t){return t.length?this.storage.filter(function(e){return e.text.toLowerCase().indexOf(t.toLowerCase())>=0}):this.storage},t.prototype.get=function(t){return this.storage.find(function(e){return e.id===t})},t.prototype.add=function(t){var e=new a(t);return this.storage.unshift(e),e.id},t.prototype.replace=function(t){this.storage.map(function(e){return e.id===t.id?t:e})},t.prototype.remove=function(t){this.storage=this.storage.filter(function(e){return e.id!==t})},t.prototype.getStorage=function(){return this.storage},t}(),i=function(){function t(t){this.searchStr="",this.renderUpdater=t,this.dataStorage=c.getInstance(),window.addEventListener("unload",this.unloadHandler.bind(this))}return t.prototype.unloadHandler=function(){n.setItem(o.localeStorageKey,this.dataStorage.getStorage())},t.prototype.searchByProjects=function(){var t=this;return function(){var e=this.value,r=t.dataStorage.search(e);t.renderUpdater(r),t.searchStr=e}},t.prototype.clickProject=function(t){var e=this;return function(){var r=e.dataStorage.get(t.id);r.toggleStatus(),e.dataStorage.replace(r),e.renderUpdater()}},t.prototype.editProject=function(t){var e=this;return function(r){var o=r.target.textContent,n=e.dataStorage.get(t.id);n.changeText(o),e.dataStorage.replace(n)}},t.prototype.createProject=function(){var t=this;return function(){t.dataStorage.add(),t.renderUpdater()}},t.prototype.removeProject=function(t){var e=this;return function(){e.dataStorage.remove(t.id);var r=e.dataStorage.getStorage();e.searchStr&&(r=e.dataStorage.search(e.searchStr)),e.renderUpdater(r)}},t}();(new(function(){function t(){this.controller=new i(this.updateProjectList.bind(this)),this.projectsList=c.getInstance().getStorage(),this.rootEl=document.getElementById(o.holderId)}return t.prototype.render=function(){var t=document.createDocumentFragment();t.append(this.createInputNode(),this.createProjectsNode(),this.createNewProjectNode()),this.rootEl.prepend(document.createElement("div")),this.rootEl.children[0].appendChild(t)},t.prototype.updateProjectList=function(t){void 0===t&&(t=this.projectsList),this.projectsList=t,document.querySelector(".project-list__project-wrapper").replaceWith(this.createProjectsNode())},t.prototype.createInputNode=function(){var t=document.createElement("input");return t.className="project-list__search-filed",t.placeholder="Поиск по проектам...",t.autofocus=!0,t.oninput=this.controller.searchByProjects(),t},t.prototype.createProjectsNode=function(){var t=this,e=document.createElement("div");return e.className="project-list__project-wrapper",this.projectsList.forEach(function(r){e.appendChild(t.createProjectNode(r))}),e},t.prototype.createProjectNode=function(t){var e=document.createElement("div");e.className="project-list__project";var r=document.createElement("input");r.type="checkbox",r.className="project-list__project-checkbox",r.checked=t.isDone,r.onclick=this.controller.clickProject(t);var o=document.createElement("span"),n=t.isDone?" project-list__project-value_done":"";o.className="project-list__project-value"+n,o.innerText=t.text,o.contentEditable="true",o.oninput=this.controller.editProject(t);var a=document.createElement("span");return a.className="project-list__remove-project",a.innerText="X",a.title="Удалить проект",a.onclick=this.controller.removeProject(t),e.append(r,o,a),e},t.prototype.createNewProjectNode=function(){var t=document.createElement("div");t.className="project-list__add-project";var e=document.createElement("span");return e.className="project-list__add-project-button",e.innerText="Добавить новый проект",e.onclick=this.controller.createProject(),t.appendChild(e),t},t}())).render()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,